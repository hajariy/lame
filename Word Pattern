import java.util.HashMap;

public class Solution {
    public boolean wordPattern(String pattern, String s) {
        String[] words = s.split(" ");  // Split the string s into words
        
        // If the length of the pattern and the number of words don't match, return false
        if (pattern.length() != words.length) {
            return false;
        }
        
        HashMap<Character, String> charToWord = new HashMap<>();
        HashMap<String, Character> wordToChar = new HashMap<>();
        
        for (int i = 0; i < pattern.length(); i++) {
            char p = pattern.charAt(i);
            String w = words[i];
            
            // Check if the current character is already mapped to a word
            if (charToWord.containsKey(p)) {
                if (!charToWord.get(p).equals(w)) {
                    return false;
                }
            } else {
                charToWord.put(p, w);
            }
            
            // Check if the current word is already mapped to a character
            if (wordToChar.containsKey(w)) {
                if (wordToChar.get(w) != p) {
                    return false;
                }
            } else {
                wordToChar.put(w, p);
            }
        }
        
        return true;
    }
}
